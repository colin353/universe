syntax = "proto3";

message Binary {
  string url = 1;
  string path = 2;
}

enum ArgKind {
  STRING = 0;
  PORT_ASSIGNMENT = 1;
}

message ArgValue {
  string value = 1;
  ArgKind kind = 2;
}

message Environment {
  string name = 1;
  ArgValue value = 2;
}

enum TaskState {
  STARTING = 0;
  RUNNING = 1;
  SUCCESS = 2;
  FAILED = 3;
  RESTARTING = 4;
  UNKNOWN = 5;
  STOPPED = 6;
}

message ServiceAssignment {
  uint32 port = 1;
  string service_name = 2;
}

message TaskRuntimeInfo {
  uint32 pid = 1;
  bytes ip_address = 2;
  repeated ServiceAssignment services = 3;
  uint64 last_start_time = 4;
  uint64 last_stopped_time = 5;
  int32 exit_status = 6;
  TaskState state = 7;
}

enum RestartMode {
  ONE_SHOT = 0;
  ON_FAILURE = 1;
  ALWAYS = 2;
}

message Task {
  // Specified during task creation
  string name = 1;
  Binary binary = 2;
  repeated Environment environment = 3;
  repeated ArgValue arguments = 4;

  TaskRuntimeInfo runtime_info = 5;
  RestartMode restart_mode = 6;
}

enum DiffType {
  UNCHANGED = 0;
  ADDED = 1;
  MODIFIED = 2;
  DELETED = 3;
}

message Diff {
  string name = 1;
  DiffType kind = 2;
}

message Configuration {
  repeated Task tasks = 1;
}

message UpdateRequest {
  Configuration config = 1;

  // If set, tear down rather than create
  bool down = 2;
}

message UpdateResponse {
  bool success = 1;
  string error_message = 2;
  DiffResponse diff_applied = 3;
}

message DiffResponse {
  Configuration added = 1;
  Configuration removed = 2;
}

message Endpoint {
  bytes ip_address = 1;
  uint32 port = 2;
}

message ResolveRequest {
  string service_name = 1;
}

message ResolveResponse {
  bool success = 1;
  repeated Endpoint endpoints = 2;
  int64 ttl = 3;
}

message StatusRequest {
  string selector = 1;
}

message StatusResponse {
  repeated Task tasks = 1;
}

message GetLogsRequest {
  string resource_name = 1;
}

message Logs {
  uint64 start_time = 1;
  uint64 end_time = 2;
  string stdout = 3;
  string stderr = 4;
  int32 exit_status = 5;
}

message GetLogsResponse {
  repeated Logs logs = 1;
}

service MetalService {
   rpc Update(UpdateRequest) returns (UpdateResponse);
   rpc Diff(UpdateRequest) returns (DiffResponse);
   rpc Resolve(ResolveRequest) returns (ResolveResponse);
   rpc Status(StatusRequest) returns (StatusResponse);
   rpc GetLogs(GetLogsRequest) returns (GetLogsResponse);
}

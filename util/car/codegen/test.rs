/*
 * DO NOT EDIT THIS FILE
 *
 * It was generated by car's code generator
 *
 */

use car::{EncodedStruct, RepeatedField};

#[derive(Clone, Default)]
struct ZootOwned {
    size: u32,
}
#[derive(Clone)]
enum Zoot<'a> {
    Encoded(EncodedStruct<'a>),
    DecodedOwned(ZootOwned),
    DecodedReference(&'a ZootOwned),
}

impl<'a> Default for Zoot<'a> {
    fn default() -> Self {
        Self::DecodedOwned(ZootOwned::default())
    }
}

impl<'a> Zoot<'a> {
    pub fn new() -> Self {
        Self::DecodedOwned(ZootOwned {
            ..Default::default()
        })
    }
    pub fn to_owned(&self) -> Self {
        match self {
            Self::DecodedOwned(t) => Self::DecodedOwned(t.clone()),
            Self::DecodedReference(t) => Self::DecodedOwned((*t).clone()),
            Self::Encoded(t) => {
                unimplemented!()
            }
        }
    }
    pub fn get_size(&'a self) -> u32 {
        match self {
            Self::DecodedOwned(x) => x.size,
            Self::DecodedReference(x) => x.size,

            Self::Encoded(x) => x.get(0).unwrap().unwrap(),
        }
    }
    pub fn set_size(&mut self, value: u32) {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned();
                self.set_size(value);
            }
            Self::DecodedOwned(v) => {
                v.size = value;
            }
        }
    }
}
#[derive(Clone, Default)]
struct TootOwned {
    toot: ZootOwned,
    id: Vec<u64>,
}
#[derive(Clone)]
enum Toot<'a> {
    Encoded(EncodedStruct<'a>),
    DecodedOwned(TootOwned),
    DecodedReference(&'a TootOwned),
}

impl<'a> Default for Toot<'a> {
    fn default() -> Self {
        Self::DecodedOwned(TootOwned::default())
    }
}

impl<'a> Toot<'a> {
    pub fn new() -> Self {
        Self::DecodedOwned(TootOwned {
            ..Default::default()
        })
    }
    pub fn to_owned(&self) -> Self {
        match self {
            Self::DecodedOwned(t) => Self::DecodedOwned(t.clone()),
            Self::DecodedReference(t) => Self::DecodedOwned((*t).clone()),
            Self::Encoded(t) => {
                unimplemented!()
            }
        }
    }
    pub fn get_toot(&'a self) -> Zoot {
        match self {
            Self::DecodedOwned(x) => Zoot::DecodedReference(&x.toot),
            Self::DecodedReference(x) => Zoot::DecodedReference(&x.toot),
            Self::Encoded(x) => Zoot::Encoded(x.get(0).unwrap().unwrap()),
        }
    }
    pub fn set_toot(&mut self, value: ZootOwned) {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned();
                self.set_toot(value);
            }
            Self::DecodedOwned(v) => {
                v.toot = value;
            }
        }
    }
    pub fn get_id(&'a self) -> RepeatedField<'a, u64> {
        match self {
            Self::DecodedOwned(x) => RepeatedField::DecodedReference(x.id.as_slice()),
            Self::DecodedReference(x) => RepeatedField::DecodedReference(x.id.as_slice()),
            Self::Encoded(x) => RepeatedField::Encoded(x.get(1).unwrap().unwrap()),
        }
    }
    pub fn set_id(&mut self, value: Vec<u64>) {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned();
                self.set_id(value);
            }
            Self::DecodedOwned(v) => {
                v.id = value;
            }
        }
    }
}

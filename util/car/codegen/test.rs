/*
 * DO NOT EDIT THIS FILE
 *
 * It was generated by car's code generator
 *
 */

// TODO: remove this
mod test_test;

use car::{
    Deserialize, DeserializeOwned, EncodedStruct, EncodedStructBuilder, RepeatedField, Serialize,
};

#[derive(Clone, Default)]
struct ZootOwned {
    toot: TootOwned,
    size: Vec<u64>,
    name: String,
}
#[derive(Clone)]
enum Zoot<'a> {
    Encoded(EncodedStruct<'a>),
    DecodedOwned(Box<ZootOwned>),
    DecodedReference(&'a ZootOwned),
}

impl<'a> Default for Zoot<'a> {
    fn default() -> Self {
        Self::DecodedOwned(Box::new(ZootOwned::default()))
    }
}

impl Serialize for ZootOwned {
    fn encode<W: std::io::Write>(&self, writer: &mut W) -> Result<usize, std::io::Error> {
        let mut builder = EncodedStructBuilder::new(writer);
        builder.push(&self.toot)?;
        builder.push(&self.size)?;
        builder.push(&self.name)?;
        builder.finish()
    }
}

impl DeserializeOwned for ZootOwned {
    fn decode_owned(bytes: &[u8]) -> Result<Self, std::io::Error> {
        let s = EncodedStruct::new(bytes)?;
        Ok(Self {
            toot: s.get_owned(0).unwrap()?,
            size: s.get_owned(1).unwrap()?,
            name: s.get_owned(2).unwrap()?,
        })
    }
}
impl<'a> Zoot<'a> {
    pub fn new() -> Self {
        Self::DecodedOwned(Box::new(ZootOwned {
            ..Default::default()
        }))
    }
    pub fn from_bytes(bytes: &'a [u8]) -> Result<Self, std::io::Error> {
        Ok(Self::Encoded(EncodedStruct::new(bytes)?))
    }
    pub fn to_owned(&self) -> Result<Self, std::io::Error> {
        match self {
            Self::DecodedOwned(t) => Ok(Self::DecodedOwned(t.clone())),
            Self::DecodedReference(t) => Ok(Self::DecodedOwned(Box::new((*t).clone()))),
            Self::Encoded(t) => Ok(Self::DecodedOwned(Box::new(self.clone_owned()?))),
        }
    }

    pub fn clone_owned(&self) -> Result<ZootOwned, std::io::Error> {
        match self {
            Self::DecodedOwned(t) => Ok(t.as_ref().clone()),
            Self::DecodedReference(t) => Ok((*t).clone()),
            Self::Encoded(t) => Ok(ZootOwned {
                toot: t.get_owned(0).unwrap()?,
                size: t.get_owned(1).unwrap()?,
                name: t.get_owned(2).unwrap()?,
            }),
        }
    }
    pub fn encode<W: std::io::Write>(&self, writer: &mut W) -> Result<usize, std::io::Error> {
        match self {
            Self::DecodedOwned(t) => t.encode(writer),
            Self::DecodedReference(t) => t.encode(writer),
            Self::Encoded(t) => t.encode(writer),
        }
    }
    pub fn get_toot(&'a self) -> Toot {
        match self {
            Self::DecodedOwned(x) => Toot::DecodedReference(&x.toot),
            Self::DecodedReference(x) => Toot::DecodedReference(&x.toot),
            Self::Encoded(x) => Toot::Encoded(x.get(0).unwrap().unwrap()),
        }
    }
    pub fn set_toot(&mut self, value: Toot) -> Result<(), std::io::Error> {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned()?;
                self.set_toot(value);
            }
            Self::DecodedOwned(v) => {
                v.toot = value.clone_owned()?;
            }
        }
        Ok(())
    }
    pub fn mut_toot(&mut self) -> Result<&mut TootOwned, std::io::Error> {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned()?;
                self.mut_toot()
            }
            Self::DecodedOwned(v) => {
                Ok(&mut v.toot)
            }
        }
    }
    pub fn get_size(&'a self) -> RepeatedField<'a, u64> {
        match self {
            Self::DecodedOwned(x) => RepeatedField::DecodedReference(x.size.as_slice()),
            Self::DecodedReference(x) => RepeatedField::DecodedReference(x.size.as_slice()),
            Self::Encoded(x) => RepeatedField::Encoded(x.get(1).unwrap().unwrap()),
        }
    }
    pub fn set_size(&mut self, value: Vec<u64>) -> Result<(), std::io::Error> {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned()?;
                self.set_size(value);
            }
            Self::DecodedOwned(v) => {
                v.size = value;
            }
        }
        Ok(())
    }
    pub fn mut_size(&mut self) -> Result<&mut Vec<u64>, std::io::Error> {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned()?;
                self.mut_size()
            }
            Self::DecodedOwned(v) => {
                Ok(&mut v.size)
            }
        }
    }
    pub fn get_name(&'a self) -> &str {
        match self {
            Self::DecodedOwned(x) => x.name.as_str(),
            Self::DecodedReference(x) => x.name.as_str(),

            Self::Encoded(x) => x.get(2).unwrap().unwrap(),
        }
    }
    pub fn set_name(&mut self, value: String) -> Result<(), std::io::Error> {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned()?;
                self.set_name(value);
            }
            Self::DecodedOwned(v) => {
                v.name = value;
            }
        }
        Ok(())
    }
}
#[derive(Clone, Default)]
struct TootOwned {
    id: u32,
}
#[derive(Clone)]
enum Toot<'a> {
    Encoded(EncodedStruct<'a>),
    DecodedOwned(Box<TootOwned>),
    DecodedReference(&'a TootOwned),
}

impl<'a> Default for Toot<'a> {
    fn default() -> Self {
        Self::DecodedOwned(Box::new(TootOwned::default()))
    }
}

impl Serialize for TootOwned {
    fn encode<W: std::io::Write>(&self, writer: &mut W) -> Result<usize, std::io::Error> {
        let mut builder = EncodedStructBuilder::new(writer);
        builder.push(&self.id)?;
        builder.finish()
    }
}

impl DeserializeOwned for TootOwned {
    fn decode_owned(bytes: &[u8]) -> Result<Self, std::io::Error> {
        let s = EncodedStruct::new(bytes)?;
        Ok(Self {
            id: s.get_owned(0).unwrap()?,
        })
    }
}
impl<'a> Toot<'a> {
    pub fn new() -> Self {
        Self::DecodedOwned(Box::new(TootOwned {
            ..Default::default()
        }))
    }
    pub fn from_bytes(bytes: &'a [u8]) -> Result<Self, std::io::Error> {
        Ok(Self::Encoded(EncodedStruct::new(bytes)?))
    }
    pub fn to_owned(&self) -> Result<Self, std::io::Error> {
        match self {
            Self::DecodedOwned(t) => Ok(Self::DecodedOwned(t.clone())),
            Self::DecodedReference(t) => Ok(Self::DecodedOwned(Box::new((*t).clone()))),
            Self::Encoded(t) => Ok(Self::DecodedOwned(Box::new(self.clone_owned()?))),
        }
    }

    pub fn clone_owned(&self) -> Result<TootOwned, std::io::Error> {
        match self {
            Self::DecodedOwned(t) => Ok(t.as_ref().clone()),
            Self::DecodedReference(t) => Ok((*t).clone()),
            Self::Encoded(t) => Ok(TootOwned {
                id: t.get_owned(0).unwrap()?,
            }),
        }
    }
    pub fn encode<W: std::io::Write>(&self, writer: &mut W) -> Result<usize, std::io::Error> {
        match self {
            Self::DecodedOwned(t) => t.encode(writer),
            Self::DecodedReference(t) => t.encode(writer),
            Self::Encoded(t) => t.encode(writer),
        }
    }
    pub fn get_id(&'a self) -> u32 {
        match self {
            Self::DecodedOwned(x) => x.id,
            Self::DecodedReference(x) => x.id,

            Self::Encoded(x) => x.get(0).unwrap().unwrap(),
        }
    }
    pub fn set_id(&mut self, value: u32) -> Result<(), std::io::Error> {
        match self {
            Self::Encoded(_) | Self::DecodedReference(_) => {
                *self = self.to_owned()?;
                self.set_id(value);
            }
            Self::DecodedOwned(v) => {
                v.id = value;
            }
        }
        Ok(())
    }
}

use parser::FieldType;

const DONOTEDIT: &'static str = r#"/*
 * DO NOT EDIT THIS FILE
 *
 * It was generated by car's code generator
 *
 */
"#;

pub fn generate<W: std::io::Write>(
    module: &parser::Module,
    w: &mut W,
) -> Result<(), std::io::Error> {
    write!(w, "{}\n", DONOTEDIT);

    for message in &module.messages {
        generate_module(&message, w)?;
    }

    Ok(())
}

const MESSAGE_ENUM: &'static str = r#"enum {name}<'a> {
    Encoded(RepeatedField<'a>),
    Decoded({name}Owned<'a>),
}
"#;

fn generate_module<W: std::io::Write>(
    msg: &parser::MessageDefinition,
    w: &mut W,
) -> Result<(), std::io::Error> {
    write!(w, "struct {name}Owned {{\n", name = msg.name);
    for field in &msg.fields {
        let typ = match &field.field_type {
            FieldType::Tu64 => "u64",
            FieldType::Tu32 => "u32",
            FieldType::Tu16 => "u16",
            FieldType::Tu8 => "u8",
            FieldType::Tbool => "bool",
            FieldType::Tstring => "string",
            FieldType::Tfloat => "f32",
            FieldType::Tbytes => "Vec<u8>",
            FieldType::Other(s) => s.as_str(),
        };
        let typ = if field.repeated {
            format!("Vec<{}>", typ)
        } else {
            typ.to_owned()
        };
        write!(
            w,
            "    {name}: {typ},\n",
            name = field.field_name,
            typ = typ
        );
    }
    write!(w, "}}\n");

    write!(
        w,
        r#"enum {name}<'a> {{
    Encoded(RepeatedField<'a>),
    Decoded({name}Owned<'a>),
}}

"#,
        name = msg.name
    );
    Ok(())
}
